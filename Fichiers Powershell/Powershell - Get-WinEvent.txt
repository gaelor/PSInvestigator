https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.diagnostics/get-winevent?view=powershell-7


#Get all the logs from a local computer
Get-WinEvent -ListLog *


#Get all the logs from a distant computer
Get-WinEvent -ListLog * -ComputerName nom_serveur


#Get specific logs
Get-WinEvent -LogName System
Get-WinEvent -LogName Application

Get-WinEvent -FilterHashtable @{logname='Application', 'System', 'Security'} | Where-Object { $_.recordcount -AND $_.lastwritetime -gt [datetime]::today}


#Example: Get event logs from multiple servers

#This example gets objects that represent the Application event logs on three computers: Server01, Server02, and Server03.
#The ForEach keyword is used because the ComputerName parameter accepts only one value.


$S = 'Server01', 'Server02', 'Server03'
ForEach ($Server in $S) {
  Get-WinEvent -ListLog Application -ComputerName $Server |
    Select-Object LogMode, MaximumSizeInBytes, RecordCount, LogName,
      @{name='ComputerName'; expression={$Server}} |
    Format-Table -AutoSize
}

LogMode MaximumSizeInBytes RecordCount LogName     ComputerName
 ------- ------------------ ----------- -------     ------------
Circular           15532032       14577 Application Server01
Circular           15532032        9689 Application Server02
Circular           15532032        5309 Application Server03


#The variable $S stores the names three servers: Server01, Server02, and Server03. #The ForEach statement uses a loop to process each server, ($Server in $S).
#The script block in the curly braces ({ }) runs the Get-WinEvent command. #The ListLog parameter specifies the Application log.
#The ComputerName parameter uses the variable $Server to get log information from each server.
#The objects are sent down the pipeline to the Select-Object cmdlet.
#Select-Object gets the properties LogMode, MaximumSizeInBytes, RecordCount, LogName, and uses a calculated expression to display the ComputerName using the $Server variable.
#The objects are sent down the pipeline to the Format-Table cmdlet to display the output in the PowerShell console.
#The AutoSize parameter formats the output to fit the screen.


#Creates a table of events with event source highlighted limits output to last 50 items from the system log selects only warning and critical items
Get-WinEvent –FilterHashtable @{logname=’system’; level=2,3} –MaxEvents 50

#Event Log levels
#Name               Value
#verbose            5
#Informational      4
#Warning            3
#critical           2
#Log Always         1


#Grabs error and warning event logs from Server01 limits to last 50 events saves results to a hashtable
Get-WinEvent -ComputerName Server01 –FilterHashtable @{logname='system','application'; level=2,3} –MaxEvents 50 | more

#Event Log DisplayNames
#Information
#Warning
#Critical
#Error
#Verbose


#Grabs events application log events from computer named server01 that occurred between 4/27 & 4/28/2018, displays the list in gridview format
$date1 = [datetime]"4/27/2018"
$date2 = [datetime]"4/28/2018"
Get-WinEvent –FilterHashtable @{logname='application'; level=1,2,3} -ComputerName server01 | Where-Object {$_.TimeCreated -gt $date1 -and $_.timecreated -lt $date2} | out-gridview


=============================================================================================================================================================================================================================================================================================
#FONCTIONNEL

#1 - Récupération d'un type de logs sur le jour même
$categories = Get-WinEvent -Listlog System -EA silentlycontinue | where-object { $_.recordcount -AND $_.lastwritetime -gt [datetime]::today}
Foreach ($element in $categories)
{
 $element
}
$categories | ForEach-Object{ Get-WinEvent -LogName $_.Logname } | Export-csv -Path "$env:TEMP\Get-WinEvent1_$(get-date -f dd-MM-yyyy).csv" -NoTypeInformation



#2 - Récupération de plusieurs types de logs sur le jour même
$categories = Get-WinEvent -Listlog Application, Security, System -EA silentlycontinue | where-object { $_.recordcount -AND $_.lastwritetime -gt [datetime]::today}
Foreach ($element in $categories)
{
 $element
}
$categories | ForEach-Object{ Get-WinEvent -LogName $_.Logname } | Export-csv -Path "$env:TEMP\Get-WinEvent2_$(get-date -f dd-MM-yyyy).csv" -NoTypeInformation



#3 - Récupération de plusieurs logs , sans date de début ni de fin
$categories = Get-WinEvent -Listlog Application, Security, System -EA silentlycontinue 
Foreach ($element in $categories)
{
 $element
}
$categories | ForEach-Object{ Get-WinEvent -LogName $_.Logname } | Export-csv -Path "$env:TEMP\Get-WinEvent3_$(get-date -f dd-MM-yyyy).csv" -NoTypeInformation


#4
$Date_Begin = (Get-Date) - (New-TimeSpan -Day 3)
$categories = Get-WinEvent –FilterHashtable @{logname= 'Application', 'System', 'Security'; StartTime=$Date_Begin} -EA silentlycontinue | Where-Object {$_.RecordCount -ne 0} 
Foreach ($element in $categories) 
{ 
$element 
} 
$categories | Sort-Object -Property Logname | Export-csv -Path "$env:TEMP\Get-WinEvent3days_$(get-date -f dd-MM-yyyy).csv" -NoTypeInformation

====================================================================================================================================================================
#NON FONCTIONNEL



#La gestion des dates ne fonctionne pas, récupération de logs qui sortent de ces dates
# Paramètre $_.TimeCreated incorrect ?
#4 - Récupération de plusieurs types de logs entre deux dates --> TimeCreated et non LastWriteTime
#$date = [datetime]"MM/dd/yyyy"
$date1 = [datetime]"6/20/2020"
$date2 = [datetime]"6/28/2020"
$categories = Get-WinEvent –FilterHashtable @{logname='Application','Security','System'} -EA silentlycontinue | Where-Object {$_.TimeCreated -ge $date1 -and $_.TimeCreated -le $date2}
Foreach ($element in $categories)
{
 $element
}
$categories | ForEach-Object{ Get-WinEvent -LogName $_.Logname } | Export-csv -Path "$env:TEMP\Get-WinEvent4_$(get-date -f dd-MM-yyyy).csv" -NoTypeInformation




#5 - Récupération de plusieurs types de logs entre deux dates --> LastWriteTime
$categories = Get-WinEvent -Listlog Application, Security, System -EA silentlycontinue | Where-Object { $_.LastWriteTime -ge '06/15/2020' -and $_.LastWriteTime -le '30/06/2020' }
Foreach ($element in $categories)
{
 $element
}
$categories | ForEach-Object{ Get-WinEvent -LogName $_.Logname } | Export-csv -Path "$env:TEMP\Get-WinEvent5_$(get-date -f dd-MM-yyyy).csv" -NoTypeInformation



#6- Récupération de plusieurs types de logs entre deux dates
#$date = [datetime]"MM/dd/yyyy"
$date1 = [datetime]"06/15/2020"
$date2 = [datetime]"06/30/2020"
$categories = Get-WinEvent -Listlog Application, Security, System -EA silentlycontinue | Where-Object {$_.LastWriteTime -ge $date1 -and $_.LastWriteTime -le $date2}
Foreach ($element in $categories)
{
 $element
}
$categories | ForEach-Object{ Get-WinEvent -LogName $_.Logname } | Export-csv -Path "$env:TEMP\Get-WinEvent6_$(get-date -f dd-MM-yyyy).csv" -NoTypeInformation



#La gestion des dates ne fonctionne pas, récupération de logs qui sortent de ces dates
#7 - Récupération de plusieurs types de logs entre aujourd'hui et J-X
$categories3 = Get-WinEvent -Listlog Application, Security, System -EA silentlycontinue | Where-Object { (Get-Date).AddDays(-8) }
Foreach ($element in $categories3)
{
 $element
}
$categories3 | ForEach-Object{ Get-WinEvent -LogName $_.Logname } | Export-csv -Path "$env:TEMP\Get-WinEvent17_$(get-date -f dd-MM-yyyy).csv" -NoTypeInformation


#8- Récupération de plusieurs types de logs entre deux dates
[datetime]$date1 = "6/18/2020"
[datetime]$date2 = "6/30/2020"
$categories5 = Get-WinEvent -LogName Application, Security, System -EA silentlycontinue | Where-Object {$_.TimeCreated -ge $date1 -and $_.TimeCreated -le $date2}
Foreach ($element in $categories5)
{
 $element
}
$categories5 | ForEach-Object{ Get-WinEvent -LogName $_.Logname } | Export-csv -Path "$env:TEMP\Get-WinEvent30_$(get-date -f dd-MM-yyyy).csv" -NoTypeInformation



#9- Récupération de plusieurs types de logs entre deux dates
[datetime]$date1 = "6/20/2020"
[datetime]$date2 = "6/28/2020"
$categories4 = Get-WinEvent –FilterHashtable @{logname= 'Application'}  -EA silentlycontinue | Where-Object {$_.TimeCreated -ge $date1 -and $_.TimeCreated -le $date2}
Foreach ($element in $categories4)
{
 $element
}
$categories4 | ForEach-Object{ Get-WinEvent -LogName $_.Logname } | Export-csv -Path "$env:TEMP\Get-WinEvent20_$(get-date -f dd-MM-yyyy).csv" -NoTypeInformation



#10
$categories = Get-WinEvent -Listlog Application | Sort-Object -Property @{Expression = {$_.CreationTime - $_.LastWriteTime -ge '06/15/2020 00:00:00'}; Descending = $False}
Foreach ($element in $categories)
{
 $element
}
$categories | ForEach-Object{ Get-WinEvent -LogName $_.Logname } | Export-csv -Path "$env:TEMP\Get-WinApp01_$(get-date -f dd-MM-yyyy).csv" -NoTypeInformation



#11
$categories = Get-WinEvent -Listlog Application | Sort-Object -Property @{Expression = {$_.CreationTime -ge [datetime]"06/15/2020" -and $_.CreationTime-le [datetime]"06/30/2020"}; Descending = $False}
Foreach ($element in $categories)
{
 $element
}
$categories | ForEach-Object{ Get-WinEvent -LogName $_.Logname } | Export-csv -Path "$env:TEMP\Get-WinApp055_$(get-date -f dd-MM-yyyy).csv" -NoTypeInformation


#12

$Date_Begin = Get-Date.AddDays(-5)
$categories = Get-WinEvent -Listlog * -EA silentlycontinue | where {$_.RecordCount -ne 0}
Foreach ($element in $categories)
{
 Get-WinEvent -FilterHashtable @{LogName=$element.LogName; StartTime=$Date_Begin; EndTime=[datetime]::Today}
}
Export-csv -Path "$env:TEMP\Get-WinEventDate_$(Get-Date -f dd-MM-yyyy).csv" -NoTypeInformation


--> #Message problématique à la fin de la commande
cmdlet Export-Csv at command pipeline position 1
Supply values for the following parameters:
InputObject:
--> #peu importe l'entrée, le fichier csv ne comprend qu'une seule case





#Code Gaelor

$Date_Begin = (Get-Date) - (New-TimeSpan -Day 2)
$categories = Get-WinEvent -Listlog * -EA silentlycontinue | where {$_.RecordCount -ne 0}
Foreach ($element in $categories)
{
 Get-WinEvent -FilterHashtable @{LogName=$element.LogName; StartTime=$Date_Begin}
}




(Get-Date) - (New-TimeSpan -Day 1)







=====================================================================================================================================================================
#!!! NE PAS MELANGER Get-EventLog & Get-WinEvent !!!#

$categories = Get-Eventlog -List | Select log
ForEach ($element in $categories) 
{
    $element
}

Get-WinEvent $categories -EA silentlycontinue | Where-Object { $_.recordcount -AND $_.lastwritetime -gt [datetime]::today} | Foreach-Object { Get-WinEvent -LogName $_.logname } 



$cat = Get-WinEvent -FilterHashtable @{logname='Application', 'System', 'Security'}
ForEach ($element in $cat)
{
    $element
}

Get-WinEvent -FilterHashtable @{logname='Application', 'System', 'Security'}

Get-WinEvent -ListLog * | Sort-Object ProviderName

Get-WinEvent -ListLog * | ForEach-Object{ Get-WinEvent -LogName $_.Logname } | Export-csv -Path "$env:TEMP\Get-WinEvent_$(get-date -f dd-MM-yyyy).csv" -NoTypeInformation

Get-WinEvent $categories -EA silentlycontinue  | ForEach-Object{ Get-WinEvent -LogName $_.Logname } | Where-Object { $_.recordcount -AND $_.lastwritetime -gt [datetime]::today} | Export-csv -Path "$env:TEMP\Get-WinEvent_$(get-date -f dd-MM-yyyy).csv" -NoTypeInformation

Get-WinEvent $categories -EA silentlycontinue  | ForEach-Object{ Get-WinEvent -LogName $_.Logname } | Export-csv -Path "$env:TEMP\Get-WinEvent_$(get-date -f dd-MM-yyyy).csv" -NoTypeInformation

Get-WinEvent $categories -EA silentlycontinue | Where-Object { $_.recordcount -AND $_.lastwritetime -gt [datetime]::today} | Export-csv -Path "$env:TEMP\Get-WinEvent_$(get-date -f dd-MM-yyyy).csv" -NoTypeInformation

Where-Object { $_.Log -eq "Application" }
=============================================================================================================================================================================================================================================================================================